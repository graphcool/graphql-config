(self.webpackChunk=self.webpackChunk||[]).push([[275],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return t?o.createElement(h,i(i({ref:n},c),{},{components:t})):o.createElement(h,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3388:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var o=t(2122),r=t(9756),a=(t(7294),t(3905)),i=["components"],s={id:"extensions",title:"Writing and Consuming Extensions",sidebar_label:"Extensions"},l={unversionedId:"extensions",id:"extensions",isDocsHomePage:!1,title:"Writing and Consuming Extensions",description:"The main purpose of GraphQL Config Extensions is to pass information to extension's consumer in order to extend the behavior of GraphQL Config's logic.",source:"@site/docs/author-extensions.md",sourceDirName:".",slug:"/extensions",permalink:"/extensions",editUrl:"https://github.com/kamilkisiela/graphql-config/edit/master/website/docs/author-extensions.md",version:"current",sidebar_label:"Extensions",frontMatter:{id:"extensions",title:"Writing and Consuming Extensions",sidebar_label:"Extensions"},sidebar:"docs",previous:{title:"Loading Config",permalink:"/load-config"},next:{title:"Loaders",permalink:"/loaders"}},p=[{value:"How to write extensions",id:"how-to-write-extensions",children:[{value:"Schema Middlewares",id:"schema-middlewares",children:[]}]},{value:"Consuming extension",id:"consuming-extension",children:[]},{value:"Registering Loaders",id:"registering-loaders",children:[]}],c={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The main purpose of GraphQL Config Extensions is to pass information to extension's consumer in order to extend the behavior of GraphQL Config's logic."),(0,a.kt)("p",null,"GraphQL Config ships TypeScript declaration files so let's make use of them in following examples."),(0,a.kt)("h2",{id:"how-to-write-extensions"},"How to write extensions"),(0,a.kt)("p",null,"In order to make sure you write extensions correctly, import and use the",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLExtensionDeclaration")," type from ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql-config")," package. Thanks to TypeScript, you get autocompletion and in-editor validation."),(0,a.kt)("p",null,"The main requirement of an extension is its name. Providing a name lets GraphQL Config to match the extension with its namespace in the config file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {GraphQLExtensionDeclaration} from 'graphql-config';\n\nconst InspectorExtension: GraphQLExtensionDeclaration = (api) => {\n  return {\n    name: 'inspector',\n  };\n};\n")),(0,a.kt)("h3",{id:"schema-middlewares"},"Schema Middlewares"),(0,a.kt)("p",null,"GraphQL Config lets you intercept the GraphQL Schema loading process which may be helpful when dealing with custom directives like in Relay or Apollo Federation. We call it Middlewares."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {GraphQLExtensionDeclaration} from 'graphql-config';\n\nconst RelayExtension: GraphQLExtensionDeclaration = (api) => {\n  api.loaders.schema.use((document) => {\n    // The middleware receives a DocumentNode object\n    // Adds relay directives\n    // Returns a new DocumentNode\n    return addRelayToDocumentNode(document);\n  });\n\n  return {\n    name: 'relay',\n  };\n};\n")),(0,a.kt)("h2",{id:"consuming-extension"},"Consuming extension"),(0,a.kt)("p",null,"As a GraphQL tool author you will likely want to load the config and register your extension in order to understand user's configuration."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {loadConfig} from 'graphql-config';\nimport {InspectorExtension} from './extension';\n\nasync function main() {\n  const config = await loadConfig({\n    extensions: [InspectorExtension],\n  });\n}\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Synchronous version: ",(0,a.kt)("inlineCode",{parentName:"p"},"loadConfigSync"))),(0,a.kt)("p",null,"Now that everything is ready, GraphQL Config understands there's the Inspector extension."),(0,a.kt)("p",null,"In order to access information stored in the config file, do the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"async function main() {\n  // ... code from previous steps\n\n  // Reads configuration of a default project\n  const project = config.getDefault();\n  // Reads configuration of a named project\n  const project = config.getProject('admin');\n\n  // Reads extenion's configuration defined in a project\n  const inspectorConfig = project.extension('inspector');\n\n  // Given following config file:\n  //\n  // schema: './schema.graphql'\n  // extensions:\n  //  inspector:\n  //    validate: true\n  //\n\n  // You're able to get `validate`:\n  if (inspectorConfig.validate === true) {\n    // ...\n  }\n}\n")),(0,a.kt)("p",null,"Getting ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," is straightforward: each project has ",(0,a.kt)("inlineCode",{parentName:"p"},"getSchema(): Promise<GraphQLSchema>")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"async function main() {\n  // ... code from the previous example\n  if (inspectorConfig.validate === true) {\n    const schema = await project.getSchema();\n\n    validateSchema(schema);\n  }\n}\n")),(0,a.kt)("p",null,"GraphQL Config is able to generate a schema not only as ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," object, but also as a ",(0,a.kt)("inlineCode",{parentName:"p"},"DocumentNode"),". (For more info, read the API reference of ",(0,a.kt)("a",{parentName:"p",href:"/graphql-project-config"},(0,a.kt)("inlineCode",{parentName:"a"},"GraphQLProjectConfig")),".)\nIt's also capable of loading operations and fragments."),(0,a.kt)("h2",{id:"registering-loaders"},"Registering Loaders"),(0,a.kt)("p",null,"In previous examples, we pointed GraphQL Config to the ",(0,a.kt)("inlineCode",{parentName:"p"},"schema.graphql")," file. GraphQL Config, by default, understands the Introspection result stored in JSON file, GraphQL files (",(0,a.kt)("inlineCode",{parentName:"p"},".graphql"),", ",(0,a.kt)("inlineCode",{parentName:"p"},".gql"),", ",(0,a.kt)("inlineCode",{parentName:"p"},".graphqls")," and ",(0,a.kt)("inlineCode",{parentName:"p"},".gqls"),") and the document returned by any functioning GraphQL endpoint (specified by URL)."),(0,a.kt)("p",null,"In some cases, you may want to extend that behavior and teach GraphQL Config how to look for GraphQL SDL (modularized schema for example) across many JavaScript or TypeScript files."),(0,a.kt)("p",null,"It's now possible thanks to ",(0,a.kt)("strong",{parentName:"p"},"loaders"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools"},"GraphQL Tools")," library has ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/tree/master/packages/loaders"},"a few already written loaders")," that GraphQL Config uses. We mentioned the default loaders, but the repo contains a few extra ones."),(0,a.kt)("p",null,"For simplicity, we're going to use only ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/tree/master/packages/loaders/code-file"},"the one")," responsible for extracting GraphQL SDL from code files."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {CodeFileLoader} from '@graphql-tools/code-file-loader';\n\nconst InspectorExtension: GraphQLExtensionDeclaration = (api) => {\n  // Lets schema\n  api.loaders.schema.register(new CodeFileLoader());\n  // documents\n  api.loaders.documents.register(new CodeFileLoader());\n\n  return {\n    name: 'inspector',\n  };\n};\n")),(0,a.kt)("p",null,"Let's say you have GraphQL SDL modularized across multiple TypeScript files, written like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {gql} from 'graphql-tag';\n\nexport const typeDefs = gql`\n  type User {\n    id: ID!\n    name: String!\n  }\n\n  extend type Query {\n    user(id: ID!): User!\n  }\n`;\n")),(0,a.kt)("p",null,"With ",(0,a.kt)("inlineCode",{parentName:"p"},"CodeFileLoader")," you can extract those GraphQL pieces:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"schema: './src/modules/*.ts' # uses a glob pattern to look for files\nextensions:\n  inspector:\n    validate: true\n")),(0,a.kt)("p",null,"There are two kinds of loaders. One is responsible for handling schemas, and the other covers Operations and Fragments (we call them both ",(0,a.kt)("inlineCode",{parentName:"p"},"Documents"),")."),(0,a.kt)("p",null,"To read more about loaders, please check ",(0,a.kt)("a",{parentName:"p",href:"/loaders"},'"Loaders" chapter')))}d.isMDXComponent=!0}}]);