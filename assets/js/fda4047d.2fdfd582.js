(self.webpackChunk=self.webpackChunk||[]).push([[48],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),h=r,d=m["".concat(s,".").concat(h)]||m[h]||u[h]||i;return n?a.createElement(d,o(o({ref:t},p),{},{components:n})):a.createElement(d,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8873:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o=["components"],l={id:"schema",title:"Specifying schema",sidebar_label:"Specifying schema"},s={unversionedId:"schema",id:"schema",isDocsHomePage:!1,title:"Specifying schema",description:"The simplest config specifies only schema which points to the source of GraphQL schema.",source:"@site/docs/user-schema.md",sourceDirName:".",slug:"/schema",permalink:"/schema",editUrl:"https://github.com/kamilkisiela/graphql-config/edit/master/website/docs/user-schema.md",version:"current",sidebar_label:"Specifying schema",frontMatter:{id:"schema",title:"Specifying schema",sidebar_label:"Specifying schema"},sidebar:"docs",previous:{title:"Usage",permalink:"/usage"},next:{title:"Specifying documents",permalink:"/documents"}},c=[{value:"Multiple files",id:"multiple-files",children:[]},{value:"Introspection result",id:"introspection-result",children:[]},{value:"Endpoint",id:"endpoint",children:[]},{value:"Environment variables",id:"environment-variables",children:[]},{value:"Passing headers",id:"passing-headers",children:[]}],p={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The simplest config specifies only ",(0,i.kt)("inlineCode",{parentName:"p"},"schema")," which points to the source of GraphQL schema."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"schema: ./schema.graphql\n")),(0,i.kt)("p",null,"GraphQL Config can start with a single schema and grow from there."),(0,i.kt)("h3",{id:"multiple-files"},"Multiple files"),(0,i.kt)("p",null,"GraphQL Config can also assemble multiple modularized schemas into a single GraphQL schema object."),(0,i.kt)("p",null,"You can specify a list of files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"schema:\n  - ./foo.graphql\n  - ./bar.graphql\n  - ./baz.graphql\n")),(0,i.kt)("p",null,"Alternatively, you can use a glob pattern to find and include pieces of schema:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"schema: ./*.graphql\n")),(0,i.kt)("p",null,"GraphQL Config looks for those files, reads and merges them together to produce a GraphQL schema object."),(0,i.kt)("h3",{id:"introspection-result"},"Introspection result"),(0,i.kt)("p",null,"A very common way to describe a GraphQL schema is to run an introspection query on it and save the resulting output as a JSON file. GraphQL Config can also read these files into schema objects."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"schema: ./schema.json\n")),(0,i.kt)("p",null,"Note that JSON introspection results are parsed for both file validity and for schema validity; if either check fails, an error message will be passed back to the caller."),(0,i.kt)("h3",{id:"endpoint"},"Endpoint"),(0,i.kt)("p",null,"In case you want to access a running GraphQL server via its endpoint, you can pass its address into the configuration file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"schema: http://localhost:4000/graphql\n")),(0,i.kt)("h3",{id:"environment-variables"},"Environment variables"),(0,i.kt)("p",null,"It is possible to load definitions from environment variables, with or without fallback values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"schema: ${SCHEMA_FILE:./schema.json}\n")),(0,i.kt)("p",null,"If you want to define a fallback endpoint you may wrap your value with quotation marks."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'schema: ${SCHEMA_ENDPOINT:"http://localhost:4000/graphql"}\n')),(0,i.kt)("h3",{id:"passing-headers"},"Passing headers"),(0,i.kt)("p",null,"If you need to pass headers in the schema request you can do it this way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"schema:\n  - http://localhost:4000/graphql:\n      headers:\n        Authorization: Token\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Pay special attention to the indentation of the headers block.")))}u.isMDXComponent=!0}}]);